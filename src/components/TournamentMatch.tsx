import React, { useState } from "react";
import "../styles.css";
import { Logo } from "../App"; // Adjust the import path accordingly

interface TournamentMatchProps {
  logo1: Logo;
  logo2: Logo;
  onSelect: (winner: Logo) => void;
  currentMatchNumber: number;
  totalMatches: number;
}

export const TournamentMatch: React.FC<TournamentMatchProps> = ({
  logo1,
  logo2,
  onSelect,
  currentMatchNumber,
  totalMatches,
}) => {
  const [overlayMode, setOverlayMode] = useState(false);

  const toggleOverlayMode = () => {
    setOverlayMode(!overlayMode);
  };
  return (
    <div className="tournament-match row">
      <header>
        <svg
          className="logoduel"
          width="64"
          viewBox="0 0 29 18"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M2.19531 8.70117C2.58203 8.90039 3.03906 9 3.56641 9H5.37109C5.89844 9 6.35547 8.90039 6.74219 8.70117C7.13281 8.49805 7.43359 8.22656 7.64453 7.88672C7.79806 7.63937 7.89572 7.37442 7.9375 7.09189C7.97929 7.37442 8.07694 7.63937 8.23047 7.88672C8.44531 8.22656 8.74609 8.49805 9.13281 8.70117C9.51953 8.90039 9.97656 9 10.5039 9H12.3086C12.8359 9 13.293 8.90039 13.6797 8.70117C14.0703 8.49805 14.3711 8.22656 14.582 7.88672C14.7356 7.63937 14.8332 7.37442 14.875 7.09189C14.9168 7.37442 15.0144 7.63937 15.168 7.88672C15.3828 8.22656 15.6836 8.49805 16.0703 8.70117C16.457 8.90039 16.9141 9 17.4414 9H19.2461C19.7734 9 20.2305 8.90039 20.6172 8.70117C21.0078 8.49805 21.3086 8.22656 21.5195 7.88672C21.6731 7.63937 21.7707 7.37442 21.8125 7.09189C21.8543 7.37442 21.9519 7.63937 22.1055 7.88672C22.3203 8.22656 22.6211 8.49805 23.0078 8.70117C23.3945 8.90039 23.8516 9 24.3789 9H26.1836C26.7109 9 27.168 8.90039 27.5547 8.70117C27.9453 8.49805 28.2461 8.22656 28.457 7.88672C28.668 7.54688 28.7734 7.17383 28.7734 6.76758V3.20508C28.7734 2.79492 28.668 2.42188 28.457 2.08594C28.2461 1.74609 27.9453 1.47656 27.5547 1.27734C27.168 1.07422 26.7109 0.972656 26.1836 0.972656H24.3789C23.8516 0.972656 23.3945 1.07422 23.0078 1.27734C22.6211 1.47656 22.3203 1.74609 22.1055 2.08594C21.9519 2.33045 21.8543 2.59462 21.8125 2.87844C21.7707 2.59462 21.6731 2.33045 21.5195 2.08594C21.3086 1.74609 21.0078 1.47656 20.6172 1.27734C20.2305 1.07422 19.7734 0.972656 19.2461 0.972656H17.4414C16.9141 0.972656 16.457 1.07422 16.0703 1.27734C15.6836 1.47656 15.3828 1.74609 15.168 2.08594C15.0144 2.33045 14.9168 2.59462 14.875 2.87844C14.8332 2.59462 14.7356 2.33045 14.582 2.08594C14.3711 1.74609 14.0703 1.47656 13.6797 1.27734C13.293 1.07422 12.8359 0.972656 12.3086 0.972656H10.5039C9.97656 0.972656 9.51953 1.07422 9.13281 1.27734C8.74609 1.47656 8.44531 1.74609 8.23047 2.08594C8.07694 2.33045 7.97929 2.59462 7.9375 2.87844C7.89572 2.59462 7.79806 2.33045 7.64453 2.08594C7.43359 1.74609 7.13281 1.47656 6.74219 1.27734C6.35547 1.07422 5.89844 0.972656 5.37109 0.972656H3.56641C3.03906 0.972656 2.58203 1.07422 2.19531 1.27734C1.80859 1.47656 1.50781 1.74609 1.29297 2.08594C1.08203 2.42188 0.976562 2.79492 0.976562 3.20508V6.76758C0.976562 7.17383 1.08203 7.54688 1.29297 7.88672C1.50781 8.22656 1.80859 8.49805 2.19531 8.70117ZM6.05078 6.3457H3.63086V1.5H4.25195V5.72461H6.05078V6.3457ZM10.8906 6.3457H12.4609L13.0645 6.27539L13.4336 5.90625L13.5156 5.40234V2.44922L13.4336 1.95703L13.0645 1.58203L12.4609 1.5H10.8906L10.293 1.58203L9.91797 1.95703L9.84766 2.44922V5.40234L9.91797 5.90625L10.3047 6.27539L10.8906 6.3457ZM10.9258 5.72461L10.5449 5.66602L10.457 5.31445V2.50781L10.5156 2.18555L10.9258 2.12109H12.4258L12.8359 2.18555L12.8945 2.53125V5.33789L12.8125 5.66602L12.4258 5.72461H10.9258ZM19.3984 6.3457H17.9336L17.3477 6.27539L16.9609 5.90625L16.8789 5.40234V2.46094L16.9609 1.96875L17.3359 1.59375L17.9336 1.5H19.5098L20.1895 1.58203L20.0723 2.20898L19.4688 2.10938H17.9453L17.5645 2.19727L17.5059 2.51953V5.29102L17.5879 5.66602L17.9453 5.72461H19.3633L19.75 5.66602C19.7695 5.60352 19.7832 5.54492 19.791 5.49023C19.7988 5.43555 19.8125 5.37695 19.832 5.31445V4.48828H18.7539V3.86133H20.4531V5.40234L20.3711 5.90625L19.9902 6.27539L19.3984 6.3457ZM26.3359 6.3457H24.7656L24.1797 6.27539L23.793 5.90625L23.7227 5.40234V2.44922L23.793 1.95703L24.168 1.58203L24.7656 1.5H26.3359L26.9395 1.58203L27.3086 1.95703L27.3906 2.44922V5.40234L27.3086 5.90625L26.9395 6.27539L26.3359 6.3457ZM24.4199 5.66602L24.8008 5.72461H26.3008L26.6875 5.66602L26.7695 5.33789V2.53125L26.7109 2.18555L26.3008 2.12109H24.8008L24.3906 2.18555L24.332 2.50781V5.31445L24.4199 5.66602ZM24.3789 18C23.8516 18 23.3945 17.9004 23.0078 17.7012C22.6211 17.498 22.3203 17.2266 22.1055 16.8867C21.9519 16.6394 21.8543 16.3744 21.8125 16.0919C21.7707 16.3744 21.6731 16.6394 21.5195 16.8867C21.3086 17.2266 21.0078 17.498 20.6172 17.7012C20.2305 17.9004 19.7734 18 19.2461 18H17.4414C16.9141 18 16.457 17.9004 16.0703 17.7012C15.6836 17.498 15.3828 17.2266 15.168 16.8867C15.0144 16.6394 14.9168 16.3744 14.875 16.0919C14.8332 16.3744 14.7356 16.6394 14.582 16.8867C14.3711 17.2266 14.0703 17.498 13.6797 17.7012C13.293 17.9004 12.8359 18 12.3086 18H10.5039C9.97656 18 9.51953 17.9004 9.13281 17.7012C8.74609 17.498 8.44531 17.2266 8.23047 16.8867C8.07694 16.6394 7.97928 16.3744 7.9375 16.0919C7.89571 16.3744 7.79806 16.6394 7.64453 16.8867C7.43359 17.2266 7.13281 17.498 6.74219 17.7012C6.35547 17.9004 5.89844 18 5.37109 18H3.56641C3.03906 18 2.58203 17.9004 2.19531 17.7012C1.80859 17.498 1.50781 17.2266 1.29297 16.8867C1.08203 16.5469 0.976562 16.1738 0.976562 15.7676V12.2051C0.976562 11.7949 1.08203 11.4219 1.29297 11.0859C1.50781 10.7461 1.80859 10.4766 2.19531 10.2773C2.58203 10.0742 3.03906 9.97266 3.56641 9.97266H5.37109C5.89844 9.97266 6.35547 10.0742 6.74219 10.2773C7.13281 10.4766 7.43359 10.7461 7.64453 11.0859C7.79806 11.3304 7.89571 11.5946 7.9375 11.8784C7.97928 11.5946 8.07694 11.3304 8.23047 11.0859C8.44531 10.7461 8.74609 10.4766 9.13281 10.2773C9.51953 10.0742 9.97656 9.97266 10.5039 9.97266H12.3086C12.8359 9.97266 13.293 10.0742 13.6797 10.2773C14.0703 10.4766 14.3711 10.7461 14.582 11.0859C14.7356 11.3304 14.8332 11.5946 14.875 11.8784C14.9168 11.5946 15.0144 11.3304 15.168 11.0859C15.3828 10.7461 15.6836 10.4766 16.0703 10.2773C16.457 10.0742 16.9141 9.97266 17.4414 9.97266H19.2461C19.7734 9.97266 20.2305 10.0742 20.6172 10.2773C21.0078 10.4766 21.3086 10.7461 21.5195 11.0859C21.6731 11.3304 21.7707 11.5946 21.8125 11.8784C21.8543 11.5946 21.9519 11.3304 22.1055 11.0859C22.3203 10.7461 22.6211 10.4766 23.0078 10.2773C23.3945 10.0742 23.8516 9.97266 24.3789 9.97266H26.1836C26.7109 9.97266 27.168 10.0742 27.5547 10.2773C27.9453 10.4766 28.2461 10.7461 28.457 11.0859C28.668 11.4219 28.7734 11.7949 28.7734 12.2051V15.7676C28.7734 16.1738 28.668 16.5469 28.457 16.8867C28.2461 17.2266 27.9453 17.498 27.5547 17.7012C27.168 17.9004 26.7109 18 26.1836 18H24.3789ZM24.4434 15.3457H26.8633V14.7246H25.0645V10.5H24.4434V15.3457ZM20.1777 15.3457H17.2305V10.5H20.0957V11.1211H17.8398V12.6211H19.7969V13.2363H17.8398V14.7246H20.1777V15.3457ZM10.8555 15.3457H12.4258L13.0234 15.2754L13.3984 14.9062L13.4805 14.4023V10.5H12.8594V14.3379L12.7715 14.666L12.3906 14.7246H10.8906L10.5039 14.666L10.4219 14.3145V10.5H9.8125V14.4023L9.88281 14.9062L10.2637 15.2754L10.8555 15.3457ZM5.53516 15.3457H2.92188V10.5H5.53516L6.13867 10.582L6.50781 10.957L6.58984 11.4492V14.4023L6.50781 14.9062L6.13867 15.2754L5.53516 15.3457ZM3.53125 11.1211V14.7246H5.5L5.88672 14.666L5.96875 14.3379V11.5312L5.91016 11.1855L5.5 11.1211H3.53125Z"
            fill="black"
          />
        </svg>
        <div className="progress-container">
          <div
            className="progress-bar"
            style={{ width: `${(currentMatchNumber / totalMatches) * 100}%` }}
          >
            <span className="progress-text">
              {`${currentMatchNumber}/${totalMatches}`}
            </span>
          </div>
        </div>
        <button onClick={toggleOverlayMode} className="toggle-button">
          {overlayMode ? "View Side-by-Side" : "Overlay Logos"}
        </button>
      </header>
      <div className={`main-container ${overlayMode ? "overlay" : ""}`}>
        <LogoOne logo={logo1} onSelect={onSelect} width={200} />
        <LogoTwo logo={logo2} onSelect={onSelect} width={200} />
      </div>

      <div className={`app-container ${overlayMode ? "overlay" : ""}`}>
        <div className={`app-icon`}>
          <LogoOne logo={logo1} onSelect={onSelect} width={40} />
        </div>
        <div className={`app-icon`}>
          <LogoTwo logo={logo2} onSelect={onSelect} width={40} />
        </div>
      </div>

      <div className={`browsertab-container`}>
        <div className={`tab`}>
          <LogoOne logo={logo1} onSelect={onSelect} width={16} />
          <span>Browser</span>
        </div>
        <div className={`tab`}>
          <LogoTwo logo={logo2} onSelect={onSelect} width={16} />
          <span>Browser</span>
        </div>
      </div>
    </div>
  );
};

interface LogoChoice {
  logo: Logo;
  onSelect: (logo: Logo) => void;
  width: number;
}

const LogoOne: React.FC<LogoChoice> = ({ logo, onSelect, width }) => {
  return (
    <div
      className={`logo logo-one`}
      onClick={() => onSelect(logo)}
      data-name={`${logo.name}`}
      style={{
        width: `${width}px`,
        height: `${width}px`,
        maskImage: `url(${logo.url})`,
        WebkitMaskImage: `url(${logo.url})`,
      }}
    />
  );
};

const LogoTwo: React.FC<LogoChoice> = ({ logo, onSelect, width }) => {
  return (
    <div
      className={`logo logo-two`}
      onClick={() => onSelect(logo)}
      data-name={`${logo.name}`}
      style={{
        width: `${width}px`,
        height: `${width}px`,
        maskImage: `url(${logo.url})`,
        WebkitMaskImage: `url(${logo.url})`,
      }}
    />
  );
};
